import time
from threading import Thread

class PhaseThread(Thread):
    def __init__(self, name, component=None, target=None):
        super().__init__(daemon=True, name=name)
        self._component = component
        self._target = target
        self._defused = False
        self._failed = False
        self._running = False
    def defuse(self): self._defused, self._running = True, False
    def fail(self): self._failed, self._running = True, True

class Timer(PhaseThread):
    def __init__(self, component, initial_value, name="Timer"):
        super().__init__(name, component)
        self._value = initial_value
        self._paused = False
        self._min = self._sec = ""
        self._interval = 1
    def run(self):
        self._running = True
        next_t = time.time() + self._interval
        while self._running:
            if not self._paused and time.time() >= next_t:
                self._value -= 1
                self._min = f"{max(self._value,0)//60:02d}"
                self._sec = f"{max(self._value,0)%60:02d}"
                self._component.print(f"{self._min}:{self._sec}")
                next_t += self._interval
                if self._value < 0: self._running = False
            time.sleep(0.05)
    def pause(self):
        self._paused = not self._paused
        self._component.blink_rate = (2 if self._paused else 0)
    def __str__(self):
        return "DEFUSED" if self._defused else f"{self._min}:{self._sec}"

class Keypad(PhaseThread):
    def __init__(self, comp, target, name="Keypad"):
        super().__init__(name, comp, target)
        self._value = ""
    def run(self):
        self._running = True
        while self._running:
            if self._component.pressed_keys:
                key = str(self._component.pressed_keys[0])
                while self._component.pressed_keys:
                    time.sleep(0.05)
                if key == "*": self._value = ""
                elif key == "#":
                    if self._value == self._target: self.defuse(); return
                    else: self.fail()
                elif len(self._value) < len(self._target): self._value += key
            time.sleep(0.1)
    def __str__(self):
        return "DEFUSED" if self._defused else self._value

class Wires(PhaseThread):
    def __init__(self, component, target, name="Wires"):
        super().__init__(name, component, target)
        self._target_bits = target
    def run(self):
        self._running = True
        while self._running:
            bits = "".join("1" if (w.is_cut() if hasattr(w, "is_cut") else w.value) else "0" for w in self._component)
            if bits == self._target_bits:
                self.defuse(); return
            time.sleep(0.1)
    def __str__(self):
        return "DEFUSED" if self._defused else "".join("1" if (w.is_cut() if hasattr(w, "is_cut") else w.value) else "0" for w in self._component)

class Button(PhaseThread):
    def __init__(self, state_pin, rgb_pins, target, color, timer, name="Button"):
        super().__init__(name, state_pin, target)
        self._rgb = rgb_pins
        self._timer = timer
        self._color = color
        self._pressed = False
        # immediately light exactly that one LED
        self._set_color(color)
    def _set_color(self, color):
        self._rgb[0].value = (color != "R")
        self._rgb[1].value = (color != "G")
        self._rgb[2].value = (color != "B")
    def run(self):
        self._running = True
        while self._running:
            state = self._component.value  # True when pressed
            if state and not self._pressed:
                self._pressed = True
            if not state and self._pressed:
                # on release, check timer seconds end in '5'
                if self._timer._sec.endswith('5'):
                    self.defuse()
                else:
                    self.fail()
                return
            time.sleep(0.1)
    def __str__(self):
        return "DEFUSED" if self._defused else ("Pressed" if self._component.value else "Released")

class Toggles(PhaseThread):
    def __init__(self, component, target, name="Toggles"):
        super().__init__(name, component, target)
    def run(self):
        self._running = True
        while self._running:
            bits = []
            for pin in self._component:
                bits.append(str(int(pin.read()) if hasattr(pin, 'read') else int(pin.value)))
            current = "".join(bits)
            if current == self._target:
                self.defuse(); return
            time.sleep(0.1)
    def __str__(self):
        return "DEFUSED" if self._defused else "".join(str(int(pin.read()) if hasattr(pin, 'read') else int(pin.value)) for pin in self._component)
