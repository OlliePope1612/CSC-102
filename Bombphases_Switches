self.switch_target = ''.join(random.choice("01") for _ in range(4))
self.switch_values = [0, 0, 0, 0]
def build_switch_ui(self):
    self.clear_frame()

    self.status = tk.Label(self.frame, text="Peter approaches a panel of switches!", font=("Courier New", 16),
                           fg="white", bg="black")
    self.status.pack(pady=10)

    self.switch_frame = tk.Frame(self.frame, bg="black")
    self.switch_frame.pack(pady=10)

    self.switch_buttons = []
    for i in range(4):
        btn = tk.Button(self.switch_frame, text="OFF", width=6, height=2,
                        font=("Courier New", 14), bg="gray", command=lambda i=i: self.toggle_switch(i))
        btn.grid(row=0, column=i, padx=10)
        self.switch_buttons.append(btn)

    self.submit_btn = tk.Button(self.frame, text="Submit", font=("Courier New", 14),
                                command=self.check_switches, bg="green", fg="white")
    self.submit_btn.pack(pady=10)

    self.strike_label = tk.Label(self.frame, text="Strikes: 0/3", font=("Courier New", 14), fg="red", bg="black")
    self.strike_label.pack(pady=5)

    self.result = tk.Label(self.frame, text="", font=("Courier New", 14), fg="yellow", bg="black")
    self.result.pack(pady=10)
def toggle_switch(self, index):
    self.switch_values[index] = 1 - self.switch_values[index]
    state = "ON" if self.switch_values[index] else "OFF"
    color = "lime" if self.switch_values[index] else "gray"
    self.switch_buttons[index].config(text=state, bg=color)

def check_switches(self):
    current = ''.join(str(v) for v in self.switch_values)
    if current == self.switch_target:
        self.score += 100
        self.end_game("âœ… Peter toggled the switches correctly! Bomb defused!")
    else:
        self.strikes += 1
        self.score -= 20
        self.strike_label.config(text=f"Strikes: {self.strikes}/3")
        self.result.config(text=f"WRONG SWITCH COMBO! {random.choice(side_effects)}")
        if self.strikes >= 3:
            self.end_game("ðŸ’¥ Too many strikes! The bomb exploded!", exploded=True)
def clear_frame(self):
    for widget in self.frame.winfo_children():
        widget.destroy()
